  SUBROUTINE irrad(npoi  , &! INTENT(IN   ) ::
       stef  , &! INTENT(IN   ) ::
       firb  , &! INTENT(OUT  ) ::
       firs  , &! INTENT(OUT  ) ::
       firu  , &! INTENT(OUT  ) ::
       firl  , &! INTENT(OUT  ) ::
       firg  , &! INTENT(OUT  ) ::
       firi  , &! INTENT(OUT  ) ::
       lai   , &! INTENT(IN   ) ::
       sai   , &! INTENT(IN   ) ::
       fu    , &! INTENT(IN   ) ::
       tu    , &! INTENT(IN   ) ::
       ts    , &! INTENT(IN   ) ::
       tl    , &! INTENT(IN   ) ::
       fl    , &! INTENT(IN   ) ::
       tg    , &! INTENT(IN   ) ::
       ti    , &! INTENT(IN   ) ::
       fi    , &! INTENT(IN   ) ::
       fira    )! INTENT(IN   ) ::
    ! ---------------------------------------------------------------------
    !
    ! calculates overall emitted ir flux, and net absorbed minus
    ! emitted ir fluxes for upper leaves, upper stems, lower story,
    ! soil and snow. assumes upper leaves, upper stems and lower
    ! story each form a semi-transparent plane, with the upper-leaf
    ! plane just above the upper-stem plane. the soil and snow 
    ! surfaces have emissivities of 0.95.
    !
    ! the incoming flux is supplied in comatm array fira
    !
    ! the emitted ir flux by overall surface system is returned in
    ! com1d array firb - the ir fluxes absorbed by upper leaves,
    ! upper stems, lower veg, soil and snow are returned in com1d 
    ! arrays firu, firs, firl, firg and firi
    ! 
    ! other com1d arrays used are:
    !
    ! emu, ems, eml  = emissivities of the vegetation planes
    ! fup, fdown     = upward and downward fluxes below tree level
    !
    IMPLICIT NONE
    !
    !include 'compar.h'
    !include 'comatm.h'
    !include 'comsno.h'
    !include 'comsoi.h'
    !include 'comveg.h'
    INTEGER, INTENT(IN   ) :: npoi         ! total number of land points      
    REAL(KIND=r8), INTENT(IN   ) :: stef         ! stefan-boltzmann constant (W m-2 K-4)

    REAL(KIND=r8), INTENT(OUT  ) :: firb (npoi)  ! net upward ir radiation at reference atmospheric level za (W m-2)
    REAL(KIND=r8), INTENT(OUT  ) :: firs (npoi)  ! ir radiation absorbed by upper canopy stems (W m-2)
    REAL(KIND=r8), INTENT(OUT  ) :: firu (npoi)  ! ir raditaion absorbed by upper canopy leaves (W m-2)
    REAL(KIND=r8), INTENT(OUT  ) :: firl (npoi)  ! ir radiation absorbed by lower canopy leaves and stems (W m-2)
    REAL(KIND=r8), INTENT(OUT  ) :: firg (npoi)  ! ir radiation absorbed by soil/ice (W m-2)
    REAL(KIND=r8), INTENT(OUT  ) :: firi (npoi)  ! ir radiation absorbed by snow (W m-2)
    REAL(KIND=r8), INTENT(IN   ) :: lai  (npoi,2)! canopy single-sided leaf area index (area leaf/area veg)
    REAL(KIND=r8), INTENT(IN   ) :: sai  (npoi,2)! current single-sided stem area index
    REAL(KIND=r8), INTENT(IN   ) :: fu   (npoi)  ! fraction of overall area covered by upper canopy
    REAL(KIND=r8), INTENT(IN   ) :: tu   (npoi)  ! temperature of upper canopy leaves (K)
    REAL(KIND=r8), INTENT(IN   ) :: ts   (npoi)  ! temperature of upper canopy stems (K)
    REAL(KIND=r8), INTENT(IN   ) :: tl   (npoi)  ! temperature of lower canopy leaves & stems(K)
    REAL(KIND=r8), INTENT(IN   ) :: fl   (npoi)  ! fraction of snow-free area covered by lower  canopy
    REAL(KIND=r8), INTENT(IN   ) :: tg   (npoi)  ! soil skin temperature (K)
    REAL(KIND=r8), INTENT(IN   ) :: ti   (npoi)  ! snow skin temperature (K)
    REAL(KIND=r8), INTENT(IN   ) :: fi   (npoi)  ! fractional snow cover
    REAL(KIND=r8), INTENT(IN   ) :: fira (npoi)  ! incoming ir flux (W m-2)

    !      include 'com1d.h'
    !
    ! Local arrays:
    !
    INTEGER i            ! loop indice
    !
    !
    REAL(KIND=r8) emu   (npoi) ! ir emissivity of upper-leaves veg plane
    REAL(KIND=r8) ems   (npoi) ! ir emissivity of upper-stems veg plane
    REAL(KIND=r8) eml   (npoi) ! ir emissivity of lower-story veg plane
    REAL(KIND=r8) emg   (npoi) ! ir emissivity (gray) of soil surface
    REAL(KIND=r8) emi   (npoi) ! ir emissivity (gray) of snow surface
    REAL(KIND=r8) fdown (npoi) ! downward ir flux below tree level per overall area
    REAL(KIND=r8) fdowng(npoi) ! upward   ir flux below tree level per overall area
    REAL(KIND=r8) fup   (npoi) ! downward ir flux below lower-story veg
    REAL(KIND=r8) fupg  (npoi) ! upward   ir flux below lower-story veg
    REAL(KIND=r8) fupgb (npoi) ! upward   ir flux above bare soil surface
    REAL(KIND=r8) fupi  (npoi) ! upward   ir flux above snow surface
    !
    ! set emissivities of soil and snow
    !
    REAL(KIND=r8), PARAMETER :: emisoil  =  0.95_r8  ! soil emissivity
    REAL(KIND=r8), PARAMETER :: emisnow  =  0.95_r8  ! snow emissivity

    !      DATA emisoil, emisnow
    !     &       /0.95, 0.95/
    !
    ! use uniform value 1.0 for average diffuse optical depth
    ! (although an array for solar, all values are set to 1 in twoset).
    !
    REAL(KIND=r8), PARAMETER :: avmuir = 1.0_r8      ! average diffuse optical depth

    !SAVE avmuir
    !DATA avmuir /1./
    !
    DO i=1,npoi
       !
       emu(i) = 1.0_r8 - EXP ( -lai(i,2) / avmuir )
       ems(i) = 1.0_r8 - EXP ( -sai(i,2) / avmuir )
       eml(i) = 1.0_r8 - EXP ( -(lai(i,1)+sai(i,1)) / avmuir )
       !
       emg(i) = emisoil
       emi(i) = emisnow
       !
       !        fu   ! fraction of overall area covered by upper canopy
       fdown(i) =  (1.0_r8-fu(i)) * fira(i)&
            + fu(i) * ( (1.0_r8-emu(i))*(1.0_r8-ems(i))*fira(i)&
            +         emu(i)* (1.0_r8-ems(i))*stef*(tu(i)**4)&
            +         ems(i)*stef*(ts(i)**4) )
       !
       fdowng(i) = (1.0_r8-eml(i))*fdown(i)  + eml(i)*stef*(tl(i)**4)
       !
       fupg(i)   = (1.0_r8-emg(i))*fdowng(i) + emg(i)*stef*(tg(i)**4)
       !
       fupgb(i)  = (1.0_r8-emg(i))*fdown(i)  + emg(i)*stef*(tg(i)**4)
       !
       fupi(i)   = (1.0_r8-emi(i))*fdown(i)  + emi(i)*stef*(ti(i)**4)
       !
       fup(i) = (1.0_r8-fi(i))*(      fl(i)*(       eml(i) *stef*(tl(i)**4) &
            + (1.0_r8-eml(i))*fupg(i) )         &
            +(1.0_r8-fl(i))*fupgb(i)         &
            )         &
            +     fi(i) * fupi(i)
       !
       firb(i) =   (1.0_r8-fu(i)) * fup(i) &
            + fu(i)  * ( (1.0_r8-emu(i))*(1.0_r8-ems(i))*fup(i)&
            +    emu(i)*stef*(tu(i)**4)&
            +    ems(i)*(1.0_r8-emu(i))*stef*(ts(i)**4) )
       !
       firu(i) =   emu(i)*ems(i)*stef*(ts(i)**4)  &
            + emu(i)*(1.0_r8-ems(i))*fup(i)           &
            + emu(i)*fira(i)           &
            - 2*emu(i)*stef*(tu(i)**4)
       !
       firs(i) =   ems(i)*emu(i)*stef*(tu(i)**4)   &
            + ems(i)*fup(i)                      &
            + ems(i)*(1.0_r8-emu(i))*fira(i)          &
            - 2*ems(i)*stef*(ts(i)**4)
       !
       firl(i) =   eml(i)*fdown(i)        &
            + eml(i)*fupg(i)         &
            - 2*eml(i)*stef*(tl(i)**4)
       !
       firg(i) =       fl(i)  * (fdowng(i) - fupg(i))   &
            + (1.0_r8-fl(i)) * (fdown(i)  - fupgb(i))
       !
       firi(i) =   fdown(i) - fupi(i)
       !
    END DO
    !
    RETURN
  END  SUBROUTINE irrad
